create dirs
remove dir

create files
remove filesopen filesclose files

navigate through dir hierarchy
ls & cd


take the cd parsing --> implement getline - check fpr builtins

-----------------
in virtual machine
virtual disk = giant file
ubuntu.vdi - virtual disk image
-----------------


 create a data structure to mamage 

 main memory/RAM is splited into fixed size pages --> need to pick a block & write to 

3 things to create

1. directory entry - structure
A logical directory, such as a file table, which lists the files and directories in your file system, 
represents  which directory that files in your file system are located in, 
and contains some other basic information/metadata

- Accessing a file is conducted by searching the entries on this table.


every directory has at least 2 dir --> ( . & .. )
    first structure = the directory entry of itself
    second structure = dir entry of parent 

struct dir entry (w/ metadata) {
     name of file/dir   \ (ROOT)
     name of parent dir
     size (file) --- number of dirs (dirs) 
     if a file: starting block - go to block 3 - open up 
     if a dir:pointers to sub dirs
 }


start of dir : block 7 
block 7 contains all info about that file


|   |   |   |   |   |
|   |   |   |   |   |

space for the root directory is allocated statically, when the disk is formatted; there is thus a finite upper limit on the number of files that can appear in the root directory. 


2. FAT / linkedlist to navigate a file
    A series of blocks, which contain the contents of the files
    3->6->5->NULL
--> so, create a linkedlist
need to make the linkedlist persistent 

find free block 

FAT - shows index for blocks from start to end of file system
how big is each entry, = unsigned short (since max only have 8192)

SIZE of FAT = (size of 1 entry) = unsigned_short * 8192 = 16,382 bytes ---> calcuate # of blocks to allocate: 16,382 bytes / BLOCK_SIZE


3. superblock
how "magic nuber" is used?
- hardcode data region

4. Data region
8192 blocks 

5. Metadata - FAT & entries

separate/hardcoded regions for each region


xxd - hex dump - encode binary to ASCII


reading a block:
- when I runout this block 
- how to know where is next block to go






Note:
in your library, you are not allowed to create any "real" files on the Linux file system itself.
Instead, you have to use the provided helper functions and store all the data that you need on the virtual disk.

 the virtual disk has 16,384 blocks, and each block holds 4KB


 files are stored in a directory and on the virtual disk. 
 In addition, your file system does not have to store more than 256 files (of course, you can create and delete files, 
 and deleted files do not count against this 256 file limit


 out of the 16384 blocks available on disk, 
 only 8,192 must be reserved as data blocks. 
 That is, you have ample of space to store your meta-information. 
 
 --> The maximum file size is 32 megabytes = 32,000 KB (all 8,192 data blocks, each with 4KB).

How to keep track of which blocks are free vs. which blocks are used by a file

How to store the pointers for files that span multiple blocks



mkfs() to make a file system
mount() - made fs accessible
take an existing directory as a target mount point 
and paste a new file system onto the directory tree at that point

prompt> mount -t ext3 /dev/sda1 /home/users

Calculating parameters: http://elm-chan.org/docs/fat_e.html#fat_dir




Try read_block() / write_block()
get ready: FAT 


mount() & umount())
dont want to constantly write to a file

--> write to runtime stack & 
mount()
    load FAT to a globally access table FAT table
    
    update in program

umount() 
    update virtual disk with newstate of FAT --> find the offset 
